---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { NAME } from "../consts";
const experience = await getCollection("experience");
import TechLabel from "../components/TechLabel.astro";

import { Content as Intro } from "./intro.md";
---

<Layout title="Home">
  <div
    class="relative items-center justify-center border-b-2 border-dashed border-border"
  >
    <div class="grid-bg"></div>
    <div
      class="relative z-20 flex min-h-[600px] items-center justify-center border-x-2 border-dashed border-border p-4 sm:mx-12"
    >
      <div class="max-w-[600px] px-4">
        <h1 class="mb-4 text-6xl text-foreground">{NAME}</h1>
        <p class="text-lg leading-loose text-foreground/90">
          I'm a fullstack web developer currently working with Laravel and PHP
          professionally. In all my personal projects I primarily use NextJS and
          React.
        </p>
      </div>
      <div
        class="hidden rounded border-2 border-border md:block [&>*]:p-4 [&>*]:px-8"
      >
        <Intro />
      </div>
    </div>
  </div>

  <div
    class="relative z-30 mb-12 border-b-2 border-dashed border-border text-foreground shadow-sm backdrop-blur-2xl sm:px-12"
  >
    <div class="border-x-2 border-dashed border-border p-8 sm:p-12 md:p-24">
      <div class="mx-auto max-w-[1000px]">
        <h2 class="text-2xl font-semibold">Work Experience</h2>
        <div class="mb-12"></div>

        {
          experience.map(async (exp) => {
            const { Content } = await exp.render();

            return (
              <div class="">
                <div class="flex flex-col sm:flex-row">
                  <div class="flex flex-1 gap-1">
                    <h3 class="mb-2 text-lg">
                      {exp.data.company}
                      <span class="font-semibold ">- {exp.data.jobTitle}</span>
                    </h3>
                  </div>

                  <div class="inline whitespace-nowrap rounded  px-2 py-1 text-xs text-foreground/90">
                    {new Date(exp.data.startDate).toLocaleDateString("en-GB", {
                      month: "long",
                      year: "numeric",
                    })}
                    -{" "}
                    {exp.data.endDate
                      ? new Date(exp.data.endDate).toLocaleDateString("en-GB", {
                          month: "long",
                          year: "numeric",
                        })
                      : "Present"}
                    <span
                      class="duration-span ml-2 whitespace-nowrap text-xs text-foreground"
                      data-start={exp.data.startDate}
                      data-end={exp.data.endDate ? exp.data.endDate : null}
                    />
                  </div>
                </div>

                <div class="prose mt-4 max-w-full dark:prose-invert md:mt-0">
                  <Content />
                </div>

                <div class="mt-4 flex flex-wrap gap-2">
                  {exp.data.tech &&
                    exp.data.tech.map((tech) => <TechLabel tech={tech} />)}
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>

  <script is:inline>
    // Client-side function to calculate the duration between two dates
    const calculateDuration = (start, end) => {
      const totalMonths =
        (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30);

      const years = Math.floor(totalMonths / 12);
      const months = Math.round(totalMonths % 12);

      if (years > 0) {
        return `${years} yr${years > 1 ? "s" : ""}, ${months} mo${months !== 1 ? "s" : ""}`;
      }
      return `${months} mo${months !== 1 ? "s" : ""}`;
    };

    // Run this code after the page is fully loaded
    window.addEventListener("DOMContentLoaded", () => {
      // Get all elements with the class 'duration-span'
      const durationElements = document.querySelectorAll(".duration-span");

      // For each span element, calculate and update the duration
      durationElements.forEach((el) => {
        const startDate = new Date(el.getAttribute("data-start"));
        const endDate = el.getAttribute("data-end")
          ? new Date(el.getAttribute("data-end"))
          : new Date();
        const duration = calculateDuration(startDate, endDate);
        el.textContent = duration;
      });
    });
  </script>
</Layout>
